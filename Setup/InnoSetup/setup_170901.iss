; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Cofile_ui_Inno"
#define MyAppVersion "1.0"
#define MyAppPublisher "eglobal"
#define MyAppExeName "CofileUI.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{498A4FE5-3891-4457-846C-269FBC564350}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
LicenseFile=D:\git\config_manager\Setup\license.txt
InfoBeforeFile=D:\git\config_manager\Setup\info.txt
InfoAfterFile=D:\git\config_manager\Setup\info.txt
OutputDir=D:\git\config_manager\Setup\InnoSetup
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "D:\git\config_manager\ConfigManager_sln\CofileUI\bin\CofileUI\CofileUI\CofileUI.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\git\config_manager\ConfigManager_sln\CofileUI\bin\CofileUI\CofileUI\*"; DestDir: "{app}"; Flags: ignoreversion                    
Source: "D:\git\config_manager\Setup\Prerequisites\wic_x64_enu.exe"; DestDir: "{app}"; Flags: deleteafterinstall; AfterInstall: InstallWIC64; Check: FrameworkIsNotInstalled
Source: "D:\git\config_manager\Setup\Prerequisites\wic_x86_enu.exe"; DestDir: "{app}"; Flags: deleteafterinstall; AfterInstall: InstallWIC86; Check: FrameworkIsNotInstalled
Source: "D:\git\config_manager\Setup\Prerequisites\dotNetFx40_Client_x86_x64.exe"; DestDir: "{app}"; Flags: deleteafterinstall; AfterInstall: InstallFramework; Check: FrameworkIsNotInstalled
; Source: "C:\Windows\Microsoft.NET\assembly\GAC_MSIL\MySql.Data\v4.0_6.5.4.0__c5687fc88969c44d\MySql.Data.dll"; DestDir: "{app}\lib"; StrongAssemblyName: "MySql.Data, Version=6.5.4.0, Culture=neutral, PublicKeyToken=c5687fc88969c44d, ProcessorArchitecture=MSIL"; Flags: gacinstall sharedfile uninsnosharedfileprompt

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent


[Code]
                                    
var CancelWithoutPrompt: boolean;




function InitializeSetup(): Boolean;
begin
  CancelWithoutPrompt := false;
  result := true;
end;

procedure CancelButtonClick(CurPageID: Integer; var Cancel, Confirm: Boolean);
begin
  if CurPageID=wpInstalling then
    Confirm := not CancelWithoutPrompt;
end;


function FrameworkIsNotInstalled: Boolean;
begin
  Result := not RegKeyExists(HKEY_LOCAL_MACHINE, 'SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Client');
end;


procedure InstallWIC86;
var
  StatusText: string;
  ResultCode: Integer;  
  b: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := 'Installing .NET framework...';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  
  case ProcessorArchitecture of
    paX86: b := 1;
    paX64: b := 0;
    paIA64: b := 0;
  else
    b := 0;
  end;
  if b = 1 then
  begin
    try
        if not Exec(ExpandConstant('{app}\wic_x86_enu'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      // you can interact with the user that the installation failed
      MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.',
        mbError, MB_OK);
      CancelWithoutPrompt := true;
      WizardForm.Close;       
    end;
    finally
      WizardForm.StatusLabel.Caption := StatusText;
      WizardForm.ProgressGauge.Style := npbstNormal;
    end;
  end;
end;

procedure InstallWIC64;
var
  StatusText: string;
  ResultCode: Integer;  
  b: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := 'Installing .NET framework...';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  
  
  case ProcessorArchitecture of
    paX86: b := 0;
    paX64: b := 1;
    paIA64: b := 0;
  else
    b := 0;
  end;
               
  if b = 1 then
  begin
    try
        if not Exec(ExpandConstant('{app}\wic_x64_enu'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
    begin
      // you can interact with the user that the installation failed
      MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.',
        mbError, MB_OK);
      CancelWithoutPrompt := true;
      WizardForm.Close;       
    end;
    finally
      WizardForm.StatusLabel.Caption := StatusText;
      WizardForm.ProgressGauge.Style := npbstNormal;
    end;  end;
end;

procedure InstallFramework;
var
  StatusText: string;
  ResultCode: Integer;
begin
  StatusText := WizardForm.StatusLabel.Caption;
  WizardForm.StatusLabel.Caption := 'Installing .NET framework...';
  WizardForm.ProgressGauge.Style := npbstMarquee;
  try
      if not Exec(ExpandConstant('{app}\dotNetFx40_Client_x86_x64.exe'), '/q /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode) then
  begin
    // you can interact with the user that the installation failed
    MsgBox('.NET installation failed with code: ' + IntToStr(ResultCode) + '.',
      mbError, MB_OK);
    CancelWithoutPrompt := true;
    WizardForm.Close;       
  end;
  finally
    WizardForm.StatusLabel.Caption := StatusText;
    WizardForm.ProgressGauge.Style := npbstNormal;
  end;
end;